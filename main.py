import asyncio
import logging
import sys
import os
import json
from datetime import datetime, timedelta
import aiohttp
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters.command import CommandObject
import shelve
import gspread
import re
from google.oauth2.service_account import Credentials
from functions import *

BOT_TOKEN = os.getenv("BOT_TOKEN")
FAIL_KEYBOARD = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")]
            ])

# from auth import BOT_TOKEN
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)

class UserState(StatesGroup):
    welcome = State()
    pd1 = State()
    pd2 = State()
    pd3 = State()
    pd4 = State()
    pd5 = State()
    s_test = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()
    result_no = State()
    result_yes = State()
    user_name = State()
    user_phone = State()
    user_resume = State()
    slot_day = State()
    slot_time = State()

@router.message(CommandStart())
async def command_start_handler(message: Message, command: CommandObject, state: FSMContext) -> None:
    await state.set_state(UserState.welcome)
    sheet_id  = command.args
    if sheet_id:
        try:
            await state.update_data(sheet_id=sheet_id)
            text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –∑–¥–µ—Å—å. \n\nüåü–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏—é, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É üçÄüí¨‚ö†Ô∏è \n\n–ï—Å–ª–∏ –±–æ—Ç –≥–¥–µ-—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ 30 —Å–µ–∫—É–Ω–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–µ —Ç–µ–∫—Å—Ç–æ–º, —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –≤—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞ –∏ –∑–∞–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ, –∞ —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –Ω–∞—á–∞–ª–∞."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏", callback_data="next")]
            ])
            
            await message.answer(f"{text}", reply_markup = keyboard)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)
    else:
        await message.answer("üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: https://t.me/pnhr_test_bot?start=1YANce7tZgLUr4cTFi37zgp6rYHtsXyNAo7Rm5vV373E")

    
@router.callback_query(StateFilter(UserState.welcome))
async def pd1(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "F2:F2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{value}", reply_markup = keyboard)
            await state.set_state(UserState.pd1)
    except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)

@router.callback_query(StateFilter(UserState.pd1))
async def pd2(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "G2:G2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{value}", reply_markup = keyboard)
            await state.set_state(UserState.pd2)
    except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)

@router.callback_query(StateFilter(UserState.pd2))
async def pd3(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "H2:H2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{value}", reply_markup = keyboard)
            await state.set_state(UserState.pd3)
    except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)

@router.callback_query(StateFilter(UserState.pd3))
async def pd4(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "I2:I2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{value}", reply_markup = keyboard)
            await state.set_state(UserState.pd4)
    except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)

@router.callback_query(StateFilter(UserState.pd4))
async def pd5(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "J2:J2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{value}", reply_markup = keyboard)
            await state.set_state(UserState.pd5)
    except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)

@router.callback_query(StateFilter(UserState.pd5))
async def q1(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    text = "–†–∞–±–æ—Ç–∞ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º –∏ –∫—Ä—É—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π? –í—Å—ë –ø—Ä–æ—Å—Ç–æ!\n\n1Ô∏è‚É£–ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç ‚Äî –≤—Å–µ–≥–æ 5-10 –º–∏–Ω—É—Ç.\n\n2Ô∏è‚É£–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∫ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.\n\n3Ô∏è‚É£–í –∫–æ–Ω—Ü–µ ‚Äî –∑–∞–ø–∏—à–∏—Ç–µ –∫—Ä—É–∂–æ–∫ –≤ Telegram (30-60 —Å–µ–∫—É–Ω–¥), –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n4Ô∏è‚É£–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –¥–≤–∞ –∫–ª–∏–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞.üî•–í—Å–µ –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ –∏ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞!"
    await callback_query.message.answer(f"{text}")
    try:
            range_name = "K2:K2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await callback_query.message.answer(f"{value}")
            await state.set_state(UserState.q1)
    except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q1))
async def q2(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans1=ans1)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "L2:L2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q2)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q2))
async def q3(message: Message, state: FSMContext):
    ans2 = message.text
    await state.update_data(ans2=ans2)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "M2:M2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q3)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q3))
async def q4(message: Message, state: FSMContext):
    ans3 = message.text
    await state.update_data(ans1=ans3)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "N2:N2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q4)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q4))
async def q5(message: Message, state: FSMContext):
    ans4 = message.text
    await state.update_data(ans4=ans4)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "O2:O2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q5)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q5))
async def q6(message: Message, state: FSMContext):
    ans5 = message.text
    await state.update_data(ans5=ans5)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "P2:P2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q6)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q6))
async def q7(message: Message, state: FSMContext):
    ans6 = message.text
    await state.update_data(ans6=ans6)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "Q2:Q2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q7)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q7))
async def q8(message: Message, state: FSMContext):
    ans7 = message.text
    await state.update_data(ans7=ans7)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "R2:R2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q8)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q8))
async def q9(message: Message, state: FSMContext):
    ans8 = message.text
    await state.update_data(ans8=ans8)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "S2:S2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q9)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(StateFilter(UserState.q9))
async def q10(message: Message, state: FSMContext):
    ans9 = message.text
    await state.update_data(ans9=ans9)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    try:
            range_name = "T2:T2"
            data = await get_google_sheet_data(sheet_id,range_name)
            value = data[0][0]
            await message.answer(f"{value}")
            await state.set_state(UserState.q10)
    except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.message(StateFilter(UserState.q10))
async def process_answers(message: Message, state: FSMContext):
    ans10 = message.text
    await state.update_data(ans10=ans10)
    text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! \n\nüìù–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥–µ—Ç –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –∏ —ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 1 –º–∏–Ω—É—Ç—É ‚è≥.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∏ –º—ã —Å–æ–æ–±—â–∏–º –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n‚ùóÔ∏è–ù–∞ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n–í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ –æ—á–µ–Ω—å —Ü–µ–Ω–∏—Ç—Å—è! üôè"
    await message.answer(f"{text}")
    user_data = await state.get_data()
    promt = f"{user_data.get('ans1')},{user_data.get('ans2')},{user_data.get('ans3')},{user_data.get('ans4')},{user_data.get('ans5')},{user_data.get('ans6')},{user_data.get('ans7')},{user_data.get('ans8')},{user_data.get('ans9')},{user_data.get('ans10')}"





    # user_data = await state.get_data()
    # sheet_id = user_data.get('sheet_id')
    # try:
    #         range_name = "T2:T2"
    #         data = await get_google_sheet_data(sheet_id,range_name)
    #         value = data[0][0]
    #         await message.answer(f"{value}")
    #         await state.set_state(UserState.q10)
    # except Exception as e:
    #         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")








# @router.message(CommandStart())
# async def command_start_handler(message: Message, command: CommandObject, state: FSMContext) -> None:
#     await state.set_state(UserState.welcome)
#     sheet_id  = command.args
#     if sheet_id:
#         try:
#             await state.update_data(sheet_id=sheet_id)
#             range_name = "B2:B2"
#             data = await get_google_sheet_data(sheet_id,range_name)
#             value = data[0][0]
#             await message.answer(f"{value}")
#         except Exception as e:
#             await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
#     else:
#         await message.answer("üëã –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")

    
























async def get_google_sheet_data(sheet_id: str, range_name: str = "B2:AB2"):
    scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
    
    creds = Credentials.from_service_account_info({
        "type": os.getenv("GS_TYPE"),
        "project_id": os.getenv("GS_PROJECT_ID"),
        "private_key_id": os.getenv("GS_PRIVATE_KEY_ID"),
        "private_key": os.getenv("GS_PRIVATE_KEY").replace('\\n', '\n'),
        "client_email": os.getenv("GS_CLIENT_EMAIL"),
        "client_id": os.getenv("GS_CLIENT_ID"),
        "auth_uri": os.getenv("GS_AUTH_URI"),
        "token_uri": os.getenv("GS_TOKEN_URI"),
        "auth_provider_x509_cert_url": os.getenv("GS_AUTH_PROVIDER_X509_CERT_URL"),
        "client_x509_cert_url": os.getenv("GS_CLIENT_X509_CERT_URL"),
        "universe_domain": os.getenv("UNIVERSE_DOMAIN")
    }, scopes=scope)
    
    client = gspread.authorize(creds)
    sheet = client.open_by_key(sheet_id).get_worksheet(1) 
    data = sheet.get(range_name)
    return data

##########################################################################################################################################################################################################
##########################################################################################################################################################################################################
##########################################################################################################################################################################################################
class StateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        state = data['state']
        current_state = await state.get_state()
        data['current_state'] = current_state
        return await handler(event, data)

async def main() -> None:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    dp.include_router(router)
    dp.message.middleware(StateMiddleware())
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())