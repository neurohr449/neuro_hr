import asyncio
import logging
import sys
import os
import json
from datetime import datetime, timedelta
import aiohttp
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters.command import CommandObject
import shelve
import gspread
import re
from google.oauth2.service_account import Credentials
from openai import AsyncOpenAI
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from functions import *

BOT_TOKEN = os.getenv("BOT_TOKEN")
FAIL_KEYBOARD = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")]
            ])
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
MOSCOW_TZ = ZoneInfo("Europe/Moscow")
SERVER_TZ = ZoneInfo("UTC")
TELEGRAM_VIDEO_PATTERN = r'https://t\.me/'

# from auth import BOT_TOKEN
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)

class UserState(StatesGroup):
    welcome = State()
    pd1 = State()
    pd2 = State()
    pd3 = State()
    pd4 = State()
    pd5 = State()
    s_test = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()
    result_no = State()
    result_yes = State()
    user_name = State()
    user_phone = State()
    user_resume = State()
    slot_day = State()
    slot_time = State()
    process_time_change = State()




@router.message(CommandStart())
async def command_start_handler(message: Message, command: CommandObject, state: FSMContext) -> None:
    await state.set_state(UserState.welcome)
    sheet_id  = command.args
    if sheet_id:
        try:
            await state.update_data(sheet_id=sheet_id)
            text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –∑–¥–µ—Å—å. \n\nüåü–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏—é –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ üçÄüí¨‚ö†Ô∏è \n\n–ï—Å–ª–∏ –±–æ—Ç –≥–¥–µ-—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ 30 —Å–µ–∫—É–Ω–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–µ —Ç–µ–∫—Å—Ç–æ–º, —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –≤—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞ –∏ –∑–∞–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ, –∞ —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –Ω–∞—á–∞–ª–∞."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏", callback_data="next")]
            ])
            
            await message.answer(f"{text}", reply_markup = keyboard)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)
    else:
        await message.answer("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")


#\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: https://t.me/pnhr_test_bot?start=1dM69zoKynsuN38Z7p2XtS09TXufwmo3cZL6bHi_zcyw


@router.callback_query(lambda c: c.data == 'notification')
async def notification_cb_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == UserState.pd1.state:
         await pd1(callback_query, state)
    elif current_state == UserState.pd2.state:
         await pd2(callback_query, state)
    elif current_state == UserState.pd3.state:
         await pd3(callback_query, state)
    elif current_state == UserState.pd4.state:
         await pd4(callback_query, state)
    elif current_state == UserState.pd5.state:
         await pd5(callback_query, state)
    elif current_state == UserState.q1.state:
         await q1(callback_query.message, state)
    elif current_state == UserState.q2.state:
         await q2(callback_query.message, state)
    elif current_state == UserState.q3.state:
         await q3(callback_query.message, state)
    elif current_state == UserState.q4.state:
         await q4(callback_query.message, state)
    elif current_state == UserState.q5.state:
         await q5(callback_query.message, state)
    elif current_state == UserState.q6.state:
         await q6(callback_query.message, state)
    elif current_state == UserState.q7.state:
         await q7(callback_query.message, state)
    elif current_state == UserState.q8.state:
         await q8(callback_query.message, state)
    elif current_state == UserState.q9.state:
         await q9(callback_query.message, state)
    elif current_state == UserState.q10.state:
         await q10(callback_query.message, state)
    



@router.message(Command("get_chat_id"))
async def chat_command(message: Message, state: FSMContext):
    chat_id = message.chat.id
    chat_type = message.chat.type
    await message.reply(
        f"üÜî Chat ID: <code>{chat_id}</code>\n"
        f"üìå –¢–∏–ø —á–∞—Ç–∞: {chat_type}",
        parse_mode="HTML"
    )



@router.callback_query(StateFilter(UserState.welcome))
async def pd1(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    await state.update_data(
        survey_started=datetime.now(),
        survey_completed=False
    )
    asyncio.create_task(check_survey_completion(callback_query.message.chat.id, state))
    
    try:
            user = callback_query.from_user
            username = user.username
            first_name = user.first_name
            user_check = await write_to_google_sheet(
                                sheet_id = sheet_id, 
                                username = username,
                                first_name = first_name
                         )
            if user_check != False:
                await get_job_data(sheet_id, state)
                user_data = await state.get_data()
                match = re.search(TELEGRAM_VIDEO_PATTERN, user_data.get('video_1'))
                if match:           
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
                    ])
                    await callback_query.message.answer_video(video=user_data.get('video_1'), 
                                                              caption= f"{user_data.get('pd1')}",
                                                              reply_markup = keyboard
                                                              )
                    await state.set_state(UserState.pd1)
                    await callback_query.answer()
                else:                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
                    ])
                    await callback_query.message.answer(f"{user_data.get('pd1')}", reply_markup = keyboard)
                    await state.set_state(UserState.pd1)
                    await callback_query.answer()
                     
            else:
                 await callback_query.message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–∫–∞–∑")
    except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup = FAIL_KEYBOARD)



@router.callback_query(StateFilter(UserState.pd1))
async def pd2(callback_query: CallbackQuery, state: FSMContext):
    
    user_data = await state.get_data()
    text = {user_data.get('pd2')}
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, user_data.get('video_2'))
        if match:           
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer_video(video=user_data.get('video_2'), 
                                                        caption= f"{user_data.get('pd2')}",
                                                        reply_markup = keyboard
                                                        )
            await state.set_state(UserState.pd2)
            await callback_query.answer()
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{user_data.get('pd2')}", reply_markup = keyboard)
            await state.set_state(UserState.pd2)
            await callback_query.answer()
    else:
         await state.set_state(UserState.pd5)
         await q1(callback_query, state)



@router.callback_query(StateFilter(UserState.pd2))
async def pd3(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = {user_data.get('pd3')}
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, user_data.get('video_3'))
        if match:           
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer_video(video=user_data.get('video_3'), 
                                                        caption= f"{user_data.get('pd3')}",
                                                        reply_markup = keyboard
                                                        )
            await state.set_state(UserState.pd3)
            await callback_query.answer()
        else: 
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{user_data.get('pd3')}", reply_markup = keyboard)
            await state.set_state(UserState.pd3)
            await callback_query.answer()
    else:
         await state.set_state(UserState.pd5)
         await q1(callback_query, state)



@router.callback_query(StateFilter(UserState.pd3))
async def pd4(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = {user_data.get('pd3')}
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, user_data.get('video_4'))
        if match:           
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer_video(video=user_data.get('video_4'), 
                                                        caption= f"{user_data.get('pd4')}",
                                                        reply_markup = keyboard
                                                        )
            await state.set_state(UserState.pd4)
            await callback_query.answer()
        else:
        
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{user_data.get('pd4')}", reply_markup = keyboard)
            await state.set_state(UserState.pd4)
            await callback_query.answer()
    else:
         await state.set_state(UserState.pd5)
         await q1(callback_query, state)
    


@router.callback_query(StateFilter(UserState.pd4))
async def pd5(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = {user_data.get('pd3')}
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, user_data.get('video_5'))
        if match:           
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer_video(video=user_data.get('video_5'), 
                                                        caption= f"{user_data.get('pd5')}",
                                                        reply_markup = keyboard
                                                        )
            await state.set_state(UserState.pd5)
            await callback_query.answer()
        else:
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
            await callback_query.message.answer(f"{user_data.get('pd5')}", reply_markup = keyboard)
            await state.set_state(UserState.pd5)
            
            await callback_query.answer()
    else:
         await state.set_state(UserState.pd5)
         await q1(callback_query, state)





@router.callback_query(StateFilter(UserState.pd5))
async def q1(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_1')
    await callback_query.message.answer(f"{text}")
    await callback_query.answer()
    await callback_query.message.answer(f"{user_data.get('q1')}")
    await state.set_state(UserState.q1)


@router.message(StateFilter(UserState.q1))
async def q2(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans1=ans1)
    user_data = await state.get_data()
    await message.answer(f"{user_data.get('q2')}")
    await state.set_state(UserState.q2)


@router.message(StateFilter(UserState.q2))
async def q3(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans2=ans1)
    user_data = await state.get_data()
    await message.answer(f"{user_data.get('q3')}")
    await state.set_state(UserState.q3)

@router.message(StateFilter(UserState.q3))
async def q4(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans3=ans1)
    user_data = await state.get_data()
    text = user_data.get('q4')
    if text:
        await message.answer(f"{user_data.get('q4')}")
        await state.set_state(UserState.q4)
    else:
        await state.set_state(UserState.q10)
        await process_answers(message, state)

@router.message(StateFilter(UserState.q4))
async def q5(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans4=ans1)
    user_data = await state.get_data()
    text = user_data.get('q5')
    if text:
        await message.answer(f"{user_data.get('q5')}")
        await state.set_state(UserState.q5)
    else:
        await state.set_state(UserState.q10)
        await process_answers(message, state)

@router.message(StateFilter(UserState.q5))
async def q6(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans5=ans1)
    user_data = await state.get_data()
    text = user_data.get('q6')
    if text:
        await message.answer(f"{user_data.get('q6')}")
        await state.set_state(UserState.q6)
    else:
        await state.set_state(UserState.q10)
        await process_answers(message, state)    

@router.message(StateFilter(UserState.q6))
async def q7(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans6=ans1)
    user_data = await state.get_data()
    text = user_data.get('q7')
    if text:
        await message.answer(f"{user_data.get('q7')}")
        await state.set_state(UserState.q7)
    else:
        await state.set_state(UserState.q10)
        await process_answers(message, state)

@router.message(StateFilter(UserState.q7))
async def q8(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans7=ans1)
    user_data = await state.get_data()
    text = user_data.get('q8')
    if text:
        await message.answer(f"{user_data.get('q8')}")
        await state.set_state(UserState.q8)
    else:
        await state.set_state(UserState.q10)
        await process_answers(message, state)

@router.message(StateFilter(UserState.q8))
async def q9(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans8=ans1)
    user_data = await state.get_data()
    text = user_data.get('q9')
    if text:
        await message.answer(f"{user_data.get('q9')}")
        await state.set_state(UserState.q9)
    else:
        await state.set_state(UserState.q10)
        await process_answers(message, state)

@router.message(StateFilter(UserState.q9))
async def q10(message: Message, state: FSMContext):
    ans1 = message.text
    await state.update_data(ans9=ans1)
    user_data = await state.get_data()
    text = user_data.get('q10')
    if text:
        await message.answer(f"{user_data.get('q10')}")
        await state.set_state(UserState.q10)
    else:
        await state.set_state(UserState.q10)
        await process_answers(message, state)



@router.message(StateFilter(UserState.q10))
async def process_answers(message: Message, state: FSMContext):
    
    if message.video:
         video=message.video.file_id
         await state.update_data(video=video)
         ans10 = "–í–∏–¥–µ–æ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ"
    elif message.video_note:
         video_note = message.video_note.file_id
         await state.update_data(video_note=video_note)
         ans10 = "–í–∏–¥–µ–æ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ"
    elif message.audio:
         audio = message.audio.file_id
         await state.update_data(audio = audio)
    elif message.text:  
        ans10 = message.text
    else:
        ans10 = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
    await state.update_data(ans10=ans10)
    user_data = await state.get_data()
    text = user_data.get('text_2')
    await message.answer(f"{text}")
    await state.update_data(survey_completed = True)
    
    sheet_id = user_data.get('sheet_id')
    promt = f"–¢—ã HR –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 30 –ª–µ—Ç –≤ –Ω–∞–π–º–µ, –ø–æ–∏—Å–∫–µ –∏ –æ–±—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, —Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ —Å–≤–æ–µ–≥–æ –æ–ø—ã—Ç–∞, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –Ω–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏: {user_data.get('job_name')}, —Ç–µ–±–µ –Ω–∞–¥–æ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ –¥–µ—Å—è—Ç–∏–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–¥–∞—Ç—å –æ–±—â–∏–π –±–∞–ª–ª –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É. –ù–µ –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–∏—Å–∞—Ç—å –ª—é–±—ã–µ –±—É–∫–≤—ã, –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ —Å –æ–±—â–∏–º –±–∞–ª–ª–æ–º. (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–æ—á–∫–∏). –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–∏ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ {user_data.get('job_text')}, –ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {user_data.get('portrait')} –∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ü–µ–Ω–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å. –í–æ–ø—Ä–æ—Å 1: {user_data.get('q1')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans1')}; –í–æ–ø—Ä–æ—Å 2: {user_data.get('q2')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans2')}; –í–æ–ø—Ä–æ—Å 3: {user_data.get('q3')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans3')}; –í–æ–ø—Ä–æ—Å 4: {user_data.get('q4')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans4')}; –í–æ–ø—Ä–æ—Å 5: {user_data.get('q5')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans5')}; –í–æ–ø—Ä–æ—Å 6: {user_data.get('q6')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans6')}; –í–æ–ø—Ä–æ—Å 7:{user_data.get('q7')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans7')}; –í–æ–ø—Ä–æ—Å 8: {user_data.get('q8')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans8')}; –í–æ–ø—Ä–æ—Å 9: {user_data.get('q9')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans9')}; –í–æ–ø—Ä–æ—Å 10:{user_data.get('q10')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans10')}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ–Ω—å—à–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –¥–ª—è –∫—Ä–∞–π–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
    promt_2 = f"–¢—ã HR –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 30 –ª–µ—Ç –≤ –Ω–∞–π–º–µ, –ø–æ–∏—Å–∫–µ –∏ –æ–±—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, —Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ —Å–≤–æ–µ–≥–æ –æ–ø—ã—Ç–∞, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –Ω–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏: {user_data.get('job_name')}, —Ç–µ–±–µ –Ω–∞–¥–æ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, —Å—Ä–∞–≤–Ω–∏—Ç—å –µ–≥–æ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –ø–æ –Ω–µ–º—É. –í–æ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ü–µ–Ω–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤: –í–æ–ø—Ä–æ—Å 1: {user_data.get('q1')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans1')}; –í–æ–ø—Ä–æ—Å 2: {user_data.get('q2')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans2')}; –í–æ–ø—Ä–æ—Å 3: {user_data.get('q3')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans3')}; –í–æ–ø—Ä–æ—Å 4: {user_data.get('q4')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans4')}; –í–æ–ø—Ä–æ—Å 5: {user_data.get('q5')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans5')}; –í–æ–ø—Ä–æ—Å 6: {user_data.get('q6')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans6')}; –í–æ–ø—Ä–æ—Å 7:{user_data.get('q7')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans7')}; –í–æ–ø—Ä–æ—Å 8: {user_data.get('q8')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans8')}; –í–æ–ø—Ä–æ—Å 9: {user_data.get('q9')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans9')}; –í–æ–ø—Ä–æ—Å 10:{user_data.get('q10')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans10')} –í–æ—Ç —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {user_data.get('job_text')} –∏ –ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {user_data.get('portrait')}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ–Ω—å—à–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –¥–ª—è –∫—Ä–∞–π–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
    user_qa = f"–í–æ–ø—Ä–æ—Å 1: {user_data.get('q1')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans1')}; –í–æ–ø—Ä–æ—Å 2: {user_data.get('q2')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans2')}; –í–æ–ø—Ä–æ—Å 3: {user_data.get('q3')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans3')}; –í–æ–ø—Ä–æ—Å 4: {user_data.get('q4')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans4')}; –í–æ–ø—Ä–æ—Å 5: {user_data.get('q5')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans5')}; –í–æ–ø—Ä–æ—Å 6: {user_data.get('q6')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans6')}; –í–æ–ø—Ä–æ—Å 7:{user_data.get('q7')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans7')}; –í–æ–ø—Ä–æ—Å 8: {user_data.get('q8')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans8')}; –í–æ–ø—Ä–æ—Å 9: {user_data.get('q9')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans9')}; –í–æ–ø—Ä–æ—Å 10:{user_data.get('q10')}, –æ—Ç–≤–µ—Ç: {user_data.get('ans10')}"
    response_score = await get_chatgpt_response(promt)
    response_2 = await get_chatgpt_response(promt_2)
    target_score = user_data.get('score')
    if int(response_score) >= int(target_score):
        response = "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
    else:
        response = "–û—Ç–∫–∞–∑"
         
    await state.update_data(response=response, 
                            response_2=response_2,
                            user_qa = user_qa
                            )
    # await message.answer(f"{response_score}\n\n{response}\n\n {response_2}")
    if response == "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ":
        await state.set_state(UserState.result_yes)
        await write_to_google_sheet(
             sheet_id = sheet_id, 
             username = message.from_user.username,
             first_name=message.from_user.first_name,
             status=response,
             gpt_response=response_2,
             qa_data=user_qa
             )
        text_3 = user_data.get('text_3')
        await message.answer(text=text_3)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û.")
    
    
    
    elif response == "–û—Ç–∫–∞–∑":
          await state.set_state(UserState.result_no)
          await message.answer(f"{user_data.get('text_4')}") 
          # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
          await write_to_google_sheet(
          sheet_id=sheet_id,
          username=message.from_user.username,
          first_name=message.from_user.first_name,
          status=response,  
          gpt_response=response_2,
          qa_data=user_qa
          )
    
          
          
@router.message(StateFilter(UserState.result_yes))
async def process_name(message: Message, state: FSMContext):
        user_fio = message.text
        await state.update_data(user_fio=user_fio)
        await state.set_state(UserState.user_resume)
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ —Ä–µ–∑—é–º–µ.\n\n–í–∑—è—Ç—å –Ω–∞ —Ä–µ–∑—é–º–µ —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:https://hh.ru/applicant/resumes")

@router.message(StateFilter(UserState.user_resume))
async def process_resume(message: Message, state: FSMContext):
        user_resume = message.text
        await state.update_data(user_resume=user_resume)
        await state.set_state(UserState.user_phone)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏.")       

@router.message(StateFilter(UserState.user_phone))
async def process_resume(message: Message, state: FSMContext):
        user_phone = message.text
        await state.update_data(user_phone=user_phone)
        await state.set_state(UserState.slot_day)
         
        # –ü–æ–ª—É—á–∞–µ–º sheet_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = await state.get_data()
        sheet_id = user_data.get('sheet_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = await check_empty_cells(sheet_id)
        
        if keyboard:
                await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏",
                reply_markup=keyboard
                )
                
        else:
                await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")



@router.callback_query(lambda c: c.data.startswith("select_date_"), UserState.slot_day)
async def process_date_selection(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "B2")
    selected_date_cell = callback.data.split("_")[2]  # "select_date_B2" ‚Üí "B2"
    
    # –ü–æ–ª—É—á–∞–µ–º sheet_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    keyboard = await get_available_times(sheet_id, selected_date_cell)
    
    if keyboard:
        await callback.message.edit_text(
            "–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=keyboard
        )
        await state.set_state(UserState.slot_time)
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω.")
    
    await callback.answer()



@router.callback_query(lambda c: c.data.startswith("select_time_"), UserState.slot_time)
async def process_time_selection(callback: CallbackQuery, state: FSMContext):
    try:
        # 1. –†–∞–∑–±–∏—Ä–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
        parts = callback.data.split("_")
        column_letter = parts[2].upper()  # –ë—É–∫–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ (B, C, ...)
        row_number = parts[3]             # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        sheet_id = user_data.get('sheet_id')
        
        if not sheet_id:
            await callback.answer("‚ùå ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # 3. –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        sheet = await get_google_sheet(sheet_id, 0)
        
        target_cell = f"{column_letter}{row_number}"
        await state.update_data(target_cell = target_cell)

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫—É (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ run_in_executor)
        cell_value = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: sheet.acell(target_cell).value
        )
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å —è—á–µ–π–∫–∏
        if cell_value and cell_value.strip() and cell_value.lower() != 'none':
            await callback.answer(
                f"‚è≥ –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ: {cell_value}",
                show_alert=True
            )
            return
        
        # 6. –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        time_value = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: sheet.acell(f'A{row_number}').value
        )
        date_value = await asyncio.get_event_loop().run_in_executor(
             None,
            lambda: sheet.acell(f'{column_letter}3').value
        )
        
        

        # 7. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
        record_text = (
            f"{date_value} {time_value} #{user_data.get('response')}\n\n"
            f"–í–∞–∫–∞–Ω—Å–∏—è: {user_data.get('job_name')}\n\n"
            f"–§–ò–û: {user_data.get('user_fio', '–ë–µ–∑ –∏–º–µ–Ω–∏')}\n"
            f"–¢–ì: @{callback.from_user.username}\n"
            f"–ù–æ–º–µ—Ä: {user_data.get('user_phone', '–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}\n"
            f"–†–µ–∑—é–º–µ: {user_data.get('user_resume')}\n"
            f"C—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/{user_data.get('sheet_id')}\n\n"
            f"AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{user_data.get('response_2')}"
            
        )
        
        await state.update_data(time_value=time_value, 
                            date_value=date_value
                            )
        
        # 8. –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: sheet.update(
                range_name=target_cell,
                values=[[record_text]],
                value_input_option='USER_ENTERED'
            )
        )
        
        
        keyboard =  InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")],
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="delete_time")]
                ])
        
        # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.edit_text(
            f"üíñ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ñ–¥–µ–º –í–∞—Å –≤ {date_value} –≤ {time_value} –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –ø—Ä–∏—à–ª–µ–º –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç –¥–æ –µ–≥–æ –Ω–∞—á–∞–ª–∞.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã, —Ç–æ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è\" –∏–ª–∏ \"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\", –µ—Å–ª–∏ –≤–æ–≤—Å–µ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.", reply_markup=keyboard
        )

        
        chat_id = user_data.get('chat_id')
        await state.set_state(UserState.process_time_change)
        
        await bot.send_message(chat_id=chat_id,
                                text=f"{record_text}",
                                disable_web_page_preview=True
                                )
        video = user_data.get('video')
        if video:
            await bot.send_video(chat_id=chat_id,
                                video=video,
                                caption="–í–∏–¥–µ–æ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
                                )
        
        video_note = user_data.get('video_note')
        if video_note:
            await bot.send_video_note(chat_id=chat_id,
                                video_note=video_note
                                )
        audio = user_data.get('audio')
        if audio:
             await bot.send_audio(chat_id = chat_id,
                                  audio = audio)
        
        # 10. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        success = await write_to_google_sheet(
            sheet_id=sheet_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            status="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
            gpt_response=user_data.get('response_2', ''),
            full_name=user_data.get('user_fio'),
            phone_number=user_data.get('user_phone'),
            resume_link=user_data.get('user_resume'),
            interview_date=date_value,
            interview_time=time_value,
            qa_data=user_data.get('user_qa')
        )
        

        interview_time = parse_interview_datetime(date_value, time_value)
        interview_time_utc = interview_time.astimezone(SERVER_TZ)
        task1 = asyncio.create_task(send_reminder_at_time(callback.message.chat.id, interview_time_utc - timedelta(hours=1), "‚è∞ –î–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è 1 —á–∞—Å!"))
        task2 = asyncio.create_task(send_reminder_at_time(callback.message.chat.id, interview_time_utc, "üîî –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å!"))
        
        await state.update_data(
        date_value=date_value,
        time_value=time_value,
        reminder_tasks=[id(task1), id(task2)]  # –°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á
        )
        if not success:
            await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É")
        
        
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)


@router.callback_query(StateFilter(UserState.process_time_change))
async def time_change(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "change_time":
        user_data = await state.get_data()
        sheet_id = user_data.get('sheet_id')
        target_cell = user_data.get('target_cell')
        await clear_cell(sheet_id, target_cell)
        await state.set_state(UserState.slot_day)
         
        # –ü–æ–ª—É—á–∞–µ–º sheet_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = await state.get_data()
        sheet_id = user_data.get('sheet_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = await check_empty_cells(sheet_id)
        
        if keyboard:
                await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏",
                reply_markup=keyboard
                )
                
        else:
                await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

        await callback_query.answer()

    elif callback_query.data == "delete_time":
        user_data = await state.get_data()
        sheet_id = user_data.get('sheet_id')
        target_cell = user_data.get('target_cell')
        
        await  clear_cell(sheet_id, target_cell)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="change_time")]
        ])

        await callback_query.message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup = keyboard)

        await callback_query.answer()
    
##########################################################################################################################################################################################################
async def check_survey_completion(chat_id: int, state: FSMContext):
    await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å
    
    data = await state.get_data()
    if not data.get("survey_completed", False):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="notification")]
        ])
        await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í–∞–∫–∞–Ω—Å–∏—è –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ ‚Äì –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏–µ!\n\nüéØ –£—Å–ø–µ–π –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–∫–∞ –Ω–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç!",reply_markup=keyboard)


async def send_reminder(chat_id: int, text: str):
    await bot.send_message(chat_id, text)


async def send_reminder_at_time(chat_id: int, time_utc: datetime, text: str):
    delay = (time_utc - datetime.now(SERVER_TZ)).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)
        await send_reminder(chat_id, text)


async def cancel_old_reminders(state: FSMContext):
    data = await state.get_data()
    if "reminder_tasks" in data:
        for task_id in data["reminder_tasks"]:
            task = asyncio.all_tasks().get(task_id)
            if task and not task.done():
                task.cancel()

##########################################################################################################################################################################################################
##########################################################################################################################################################################################################
##########################################################################################################################################################################################################
class StateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        state = data['state']
        current_state = await state.get_state()
        data['current_state'] = current_state
        return await handler(event, data)

async def main() -> None:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    dp.include_router(router)
    dp.message.middleware(StateMiddleware())
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())